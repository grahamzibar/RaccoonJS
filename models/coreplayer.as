package {		import flash.utils.Dictionary;		import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.media.SoundLoaderContext;		import flash.events.Event;	import flash.net.URLRequest;		import flash.external.ExternalInterface;		public class coreplayer {				/* Models */		private var audio:Sound = null;		private var audioChannel:SoundChannel = null;		private var audioMixer:SoundTransform = null;		private var currentTrack:Dictionary = null;				/* Constants */		private static var NOT_STARTED:Number = -1;		private static var DOWNLOADING:Number = 0;		private static var DOWNLOADED:Number = 1;				/* Memory */		private var lastPosition:Number = 0;		private var savedVolume:Number = 1;				public function coreplayer() {			audioMixer = new SoundTransform(savedVolume); // TODO: save the volume setting		}				private function debug(msg:String):void {			if (ExternalInterface.available) {				ExternalInterface.call("_openconsole.debug", msg);			}		}				private function listenerOne(e:Event):void {			currentTrack["downloadStatus"] = DOWNLOADING;		}		private function listenerTwo(e:Event):void {			currentTrack["downloadStatus"] = DOWNLOADED;		}				private function setupListeners():void {			currentTrack = new Dictionary();			audio.addEventListener(Event.OPEN, listenerOne);			audio.addEventListener(Event.COMPLETE, listenerTwo);		}				private function unLoad():void {			if (audio != null) {				audio.removeEventListener(Event.OPEN, listenerOne);				audio.removeEventListener(Event.COMPLETE, listenerTwo);				if (currentTrack != null && currentTrack["downloadStatus"] == DOWNLOADING) {					audio.close();				}				audioMixer.volume = 0;				if (audioChannel != null) {					audioChannel.stop();				}				audio = null;				// Boom!			}			currentTrack = new Dictionary();			currentTrack["downloadStatus"] = NOT_STARTED;		}				public function getTrackUrl():String {			return currentTrack != null ? currentTrack["url"] : "";		}				public function resume():void {			if (audio != null) {				if (audioChannel != null) {					audioChannel.stop();				}				audioChannel = audio.play(lastPosition, 0, audioMixer);			}		}				public function pause():void {			if (audio != null && audioChannel != null) {				lastPosition = audioChannel.position;				audioChannel.stop();			}		}				public function playTrack(url:String):void {			this.loadTrack(url, true);		}				public function loadTrack(url:String, autoPlay:Boolean = false) {			unLoad();			audio = new Sound();			setupListeners();			currentTrack["url"] = url;			debug("Loading Url: " + url);			audio.load(new URLRequest(url), new SoundLoaderContext(3000, true));			audioMixer.volume = savedVolume;			currentTrack["downloadStatus"] = DOWNLOADING;			if (autoPlay) {				audioChannel = audio.play(0, 0, audioMixer);				debug("Auto-playing url: " + url);			}		}				private function getTotalTime():Number {			if (audio == null || currentTrack["downloadStatus"] == NOT_STARTED) {				return 0;			}			if (currentTrack["downloadStatus"] == DOWNLOADED) {				return audio.length;			}			// Approximate, dawg			var approx:Number = audio.bytesTotal / (audio.bytesLoaded / audio.length);			if (!isNaN(approx)) {				return approx;			}			return 0;		}				public function getLoadProgress():Number {			if (audio == null || currentTrack["downloadStatus"] == NOT_STARTED) {				return 0;			}			if (currentTrack["downloadStatus"] == DOWNLOADED) {				return 100;			}			try {				return audio.bytesLoaded / audio.bytesTotal * 100;			} catch (e:Object) {				return 0;			}			return 0;		}				public function seekTo(percent:Number):void {			if (audio != null) {				if (audioChannel != null) {					audioChannel.stop();				}				audioChannel = audio.play((percent / 100) * getTotalTime());			}		}				public function getTrackProgress():Number {			if (audio != null && audioChannel != null) {				return Math.round((audioChannel.position / getTotalTime()) * 100);			}			return 0;		}				private function getTimeString(ms:Number):String {			ms = ms / 1000;			var ms_m:Number = 60;			var ms_s:Number = 1;						var minutes:Number = Math.floor(ms / ms_m);			var minuteString:String = minutes < 10 ? "0" + minutes : minutes + "";			var seconds:Number = Math.floor((ms % ms_m) / ms_s);			var secondString:String  = seconds < 10 ? "0" + seconds : seconds + "";			return minuteString + ":" + secondString;		}				public function getTrackTime():String {			if (audio == null || audioChannel == null) {				return "00:00/00:00";			}			return getTimeString(audioChannel.position) + "/" + getTimeString(getTotalTime());		}				public function setVolume(percent:Number):void {			if (audio != null) {				savedVolume = audioMixer.volume = percent / 100;			}		}				public function getVolume():Number {			return savedVolume;		}				public function getNothing():String {			return "Nothing";		}			}	}